[
    {
        "slug": "balance-patch-3750-is-live",
        "bcSlug": "Balance-Patch-3750-Is-Live",
        "date": "2023-02-01T09:11:47",
        "title": "Balance Patch 3750 Is Live",
        "content": "\n<p>Welcome to the patchnotes for the 3750 patch.<br><br>This patch aims to alleviate the most pressing imbalances that have arouse over the past 2 years. Notably the dominance of Sniper bots and Titans/Loyalists during the T3 stage, Nukes being extremely oppressive, air T4s and T3 artilleries being rushed without any energy infrastructure and the power distribution in naval warfare being very asymmetric tech wise between factions. It also includes 2 mini-reworks, Soul Ripper and Bulwark which hopefully will help those units function better at their intended roles.<br><br>We hope you enjoy this new patch<br><br><strong>The Balance Team</strong></p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Land</strong></h4>\n\n\n\n<p><strong>T2 Land</strong><br>T2 land is much slower than T1 and T3 which doesn&#8217;t allow it to adequately cover the map, raid, and defend against attacks, especially on bigger maps. The meta in team games is to generally either completely skip T2 or go all in. These changes hope to make T2 more viable in team games and 1vs1. Another advantage in increasing the MS of T2 land is how they will interact with Rambo ACUs, especially in 1vs1. Currently, Rambo ACUs are extremely strong and even if you have more army value it&#8217;s very difficult to press your advantage since if you are the one engaging the enemy gets at least 2-3 OCs for free. With the MS changes it should allow the player with more army to more easily punish the opponent for miss positioning their ACU or being overly aggressive/borderline suicidal.<br></p>\n\n\n\n<ul><li>Increase of 0.1 Movement Speed to all Flaks, MMLs, Range Bots, and Main battle tanks.</li><li>Rhino gets a buff of 0.2 (and so does Cybran flak) as it&#8217;s currently comparatively weak to its T2 counterparts and Cybran needs a buff during its T2 stage.</li><li>Hover tanks don&#8217;t get a movement speed increase as they are already very fast and we don&#8217;t feel like this change is necessary for them. Perhaps they will get some other small tweaks next patch.</li></ul>\n\n\n\n<p><strong><strong>Asylum (Aeon T2 mobile shield)</strong></strong><br>Aeon t2 land has become arguably the best with a combination of powerful tanks, cheap shields, and the strongest ACU. This minor nerf aims at reducing the strength a little bit.</p>\n\n\n\n<ul><li>EnergyMaintenanceCost: 45 &gt; 55</li></ul>\n\n\n\n<p><strong>Titan and Loyalist</strong><br>The Titan and Loyalist build-time buffs from patch 3725 are reverted to make it harder to snowball out of control with a T3 land rush.<br>After T3 rebalance Titans with their fast recharging shields became a bit too oppressive and they are currently stronger than loyalists. A small HP nerf should put the unit in the right place while not taking away from its specialty of constantly dashing in and out and letting its shield recharge.<br>Loyalists&#8217; ability has been underwhelming and thus it&#8217;s getting a well-deserved buff, we hope this will be enough to make mixing in Loyalists in your army in later stages a more viable option instead of being a gimmick that is rarely used.<br><br><span style=\"text-decoration: underline;\">Titan:</span></p>\n\n\n\n<ul><li>BuildTime: 2160 &gt; 2400</li><li>HP 2600 &gt; 2400</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Loyalist:</span></p>\n\n\n\n<ul><li>BuildTime: 2160 &gt; 2400</li><li>The Loyalist&#8217;s ability will no longer disable weapons and the charge will kick in 1 second faster</li></ul>\n\n\n\n<p><strong>Sniper bots</strong><br>Sniper bots get an overall nerf to make it harder to snowball out of control. With the energy cost nerf specifically we aim at delaying the first few snipers from hitting the field immediately after a player gets T3 Land. For Seraphim The snipe mode icon is changed to make the difference between the snipe mode and normal mode easier to see.<br><br><span style=\"text-decoration: underline;\">Seraphim (Usha-Ah</span>)</p>\n\n\n\n<ul><li>Mass Cost: 880 &gt; 960</li><li>Energy Cost: 9700 &gt; 15.360</li><li>BuildTime: 4500 &gt; 5400</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon (Sprite Striker)</span></p>\n\n\n\n<ul><li>Mass Cost: 800 &gt; 880</li><li>Energy Cost: 8900 &gt; 14.080</li><li>BuildTime: 4500 &gt; 4950</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Air</strong></h4>\n\n\n\n<p><strong>Air Experimentals</strong><br>Air experimentals were always extremely cheap in energy cost compared to t3 air. This led to the ability to build air t4â€™s without any power setup like is required for t3 air and thus became a relatively cheesy way to win games. With this change, the e cost is more streamlined with t3 air.<br><br>We also reduce the crash damage of air T4s. Their ability to kill heavily shielded targets by simply dying and hitting them provided the defending player with little counter-play. They still deal a considerable amount of damage to not break the immersion of the game but these values will be further reduced if deemed necessary.<br><br><span style=\"text-decoration: underline;\">Ahwassa</span><br>In addition to the energy cost nerf the ahwassa gets a small nerf to its AoE considering its dominance compared to the other air T4s.</p>\n\n\n\n<ul><li>Energy Cost: 780.000 &gt; 1.920.000</li><li>DamageRadius: 20 &gt; 19</li><li>Crash damage 10.000 &gt; 7000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">CZAR</span></p>\n\n\n\n<ul><li>Energy Cost: 731.250 &gt; 1.530.000</li><li>Crash damage 10.000 &gt; 7000</li></ul>\n\n\n\n<p><strong>SoulRipper Mini-rework</strong><br>A decrease of roughly 15% across the board. The goal is to make the SR a more viable option and further establish it as the value over time air experimental. With the lower cost, it will be easier for the player to justify investing in the SR<br>and slowly leverage a small-medium advantage he had in the air.<br><br>In addition to the stat changes we also increase the movement speed by 1 and give it 75 hp regen per second.<br><br>In addition to the stat changes we also increase the movement speed by 1 and give it 75 hp regen per second.</p>\n\n\n\n<ul><li>HP: 90.000 &gt; 75.000</li><li>Regen Rate: 0 &gt; 75</li><li>Mass Cost: 34.000 &gt; 29.000</li><li>Energy Cost: 480.000 &gt; 812,000</li><li>BuiltTime: 56.250 &gt; 48.000</li><li>DPS: 1535 &gt; 1368.3</li><li>Crash damage 7000 &gt; 5000</li></ul>\n\n\n\n<p><strong>Strategic Bombers</strong><br>All strategic bombers have their elevation reduced. This will make them easier to hit by non-homing AA which should greatly increase the effectiveness of T1 AA and T2 Flak (although that will now hit rarely instead of never) which should make the early strats a lot less oppressive since now every play will be able to build a unit that will at least partially counter the strat.</p>\n\n\n\n<ul><li>Elevation: 20 &gt; 14</li></ul>\n\n\n\n<p><strong>T3 UEF Air</strong><br>Added jamming for Spy Planes and Strategic Bombers allowing for more counter-intel capabilities. The scouts will have their jamming on by default and for free while the Strats will have theirs off by default and it will cost 25e/s to run (same as the T3 gunship). These changes should allow UEF air players to trick their opponents by including Air scouts in their mix and artificially inflating the size of their ASF cloud. It will also make the Air scouts harder to shoot down by static AA/ASF and buff unscouted strat runs.<br><br><strong>T2 Air crash damage</strong><br><br><span style=\"text-decoration: underline;\">Notha:</span><br>For some reason Notha had different crash damage than other T2 Fighter bombers</p>\n\n\n\n<ul><li>Crash damage 25 &gt; 200</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">T2 Transports</span>:<br>T2 transports had lower crash damage than T1 (100). These changes will also nerf arty drops since now if the transports die and land on top of them it will kill all of the arties.</p>\n\n\n\n<ul><li>Crash damage 25 -&gt; 250</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Navy</strong></h4>\n\n\n\n<p>For a long time, Aeon frigates were absolute garbage while their Destro&#8217;s were insanely good while Cybran had the exact opposite with OP frigate and weak destroyer. These changes redistribute the power of those factions while retaining the units&#8217; unique traits and further enhancing them by adjusting the ranges of the frigate. We hope it will also introduce more micro potential in frigate fights, especially with Cybran vs Aeon.<br><br>Bulwark gets a mini-rework to establish it as a T2 support vessel instead of a unit that is mainly used during the T3 stage with Battlecruisers and Battleships. This should help UEF&#8217;s notoriously weak T2 stage while making their T3 one less oppressive.<br><br>However, with the changes to Bulwark UEF Battleships are left out to dry. We are making them slightly less clunky so that hopefully they can dodge at least some shot if you micro them.<br><br>Tempest has been very powerful for a long time and it&#8217;s getting a well-deserved nerf. It will cost a bit more, and you will need more BP/infrastructure ready to build one. It won&#8217;t be able to act like a quick mass dump after spamming destroyers and skipping T3 Navy completely.<br><br><strong>Frigates</strong><br><br>Aeon:</p>\n\n\n\n<ul><li>Mass Cost: 290 &gt; 280</li><li>Energy Cost: 2900 &gt; 2800</li><li>Built Time: 1450 &gt; 1400</li><li>Range: 31 &gt; 33</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span>:</p>\n\n\n\n<ul><li>Mass Cost: 250&gt; 260</li><li>Energy Cost: 2500&gt; 2600</li><li>Built Time: 1250&gt; 1300</li><li>Range: 28 &gt; 26</li></ul>\n\n\n\n<p><strong>Destroyers</strong><br><br><span style=\"text-decoration: underline;\">UEF:</span><br>The valiant has always been one of the weakest destroyers. With this change, we hope to give it more of a tank role that fights at a short range.</p>\n\n\n\n<ul><li>HP: 7200 &gt; 8000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span>:<br>Salem has always been extremely squishy compared to other destroyers. It will still have the least hp but will now be able to survive a few more shots.<br>The TurretYawRange of salems is again slightly increased to improve the handling and micro potential.</p>\n\n\n\n<ul><li>HP: 6050 &gt; 6500</li><li>TurretYawRange: 140 &gt; 145</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon</span>:<br>Exodus was one of the 2 higher-range destroyers yet it had the highest HP of all. This was necessary due to how weak the Aeon frigate was but this kind of balance made Aeon really bad at T1 and extremely oppressive at T2 where they spammed destroyers only. With the buffs to their frigate, we can finally tune down Exodus a bit. We are reducing its HP to punish Aeon players for letting their destroyers get into range of their enemy and reducing the max range down to 70 to allow shorter-range destroyers to get into range more easily. This will also mean that the Cybran destroyer will now outrange the Exodus and thus have some edge over them.</p>\n\n\n\n<ul><li>HP: 7500 &gt; 7200</li><li>Range: 80 &gt; 70</li></ul>\n\n\n\n<p><strong>Bulwark Mini-rework</strong><br>Decrease of roughly 1/3 in the stats to allow UEF players to get them out during the T2 stage to support their navy without having to worry about having fewer destroyers and dying immediately to an enemy push.</p>\n\n\n\n<ul><li>Mass Cost: 1300 &gt; 900</li><li>Energy Cost: 13.000 &gt; 9000</li><li>Build Time: 5200 &gt; 3600</li><li>Maintenance Cost: 150 e/s &gt; 100 e/s</li><li>HP of the unit: 750 &gt; 550</li><li>Shield HP: 8000 &gt; 5500</li><li>Shield Recharge Time: 40 &gt; 30</li></ul>\n\n\n\n<p><strong>Battleships</strong><br><br><span style=\"text-decoration: underline;\">UEF</span>:<br>With the changes to the bulwark Summit will struggle against the other Battleships since it&#8217;s the slowest one by far and is not able to dodge shots. It used to rely on Shield Boats to just tank all of that damage but that won&#8217;t work to such a degree anymore. We are increasing its Movement Speed and Turn Rate slightly to make it less clunky and allow UEF players to micro their Battleships.</p>\n\n\n\n<ul><li>Movement Speed: 2.5 &gt; 2.75</li><li>Turn Rate: 25 &gt; 27.5</li><li>Acceleration and Break speed were adjusted accordingly</li></ul>\n\n\n\n<p><strong>Experimentals</strong><br><br><span style=\"text-decoration: underline;\">Tempest</span><br>Tempest is an extremely powerful unit in the right hands. It was a common sight to see them with 20k+ mass killed while the Battleships had &lt; 5k. With a relatively cheap mass cost and especially build time cost it was easy to rush with an ACU/T3 engineer and some T1 BP. If micro&#8217;ed properly enemy could never kill one without fully committing to a naval engagement thus allowing Tempests to gain a lot of value over time. These changes will hopefully make the unit more balance and force the Aeon players to have more BP in order to build a tempest.</p>\n\n\n\n<ul><li>Mass Cost: 22.000 &gt; 24.000</li><li>Build Time: 28.800 &gt; 38.400</li></ul>\n\n\n\n<p><strong>Engineers</strong><br>Engineer pathfinding is one of the most frustrating things in FAF. With the changes to their Turn rate, Back up distance, and Acceleration/Deaccelaration we hope to finally alleviate those issues. These changes will also make engineers more micro&#8217;able, especially in the early stages of the game eg. vs T1 bombers. If you want to read more take a look at this&nbsp;<a href=\"https://github.com/FAForever/fa/pull/4571\">PR&nbsp;</a>that Jip made.<br><br>We are also buffing the efficiency of higher-tech engineers. They will now get more bp while having the same cost.</p>\n\n\n\n<ul><li>T1 engineers 10.4 mass/bp</li><li>T2 engineers 10 mass/bp</li><li>T3 engineers 9.6 mass/bp</li></ul>\n\n\n\n<p><strong>Sparky (UEF T2 Field Engineer)</strong><br>This small buff should make Sparkies easier and nicer to use by not requiring players to find the nearest T1 engineer on the frontline to construct a radar or a factory. We hope these changes will encourage more aggressive usage of the Sparky on the frontlines and in drops.</p>\n\n\n\n<ul><li>Allow Sparkies to build intelligence structures(radars, sonars, stealth generators)</li><li>Allow Sparkies to build T1 factories</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\">Structures</h4>\n\n\n\n<p><strong>Hives &amp; Kennels</strong><br>Hives have been the dominant engineer station forever now, they have many advantages over Kennels and are extremely dominant in the super-late game. These changes are meant to bring the Hives more in line with the Kennels without making them a non-viable option if you quickly want some concentrated, albeit less efficient, bp in your base in the mid to early late-game. Hives will now get less efficient the higher tech of the Hive you get, this is meant to reduce their strength as an insanely compact, high bp that is easy to shield. You will now have to pay more to have a more concentrated, higher HP, higher range BP.<br>We are also reducing the HP of engineering stations to make them a bit easier to snipe and to emphasize protecting your BP more.<br><br><strong>Hives</strong><br>Hives have 3 different levels, I will denote them T1, T2, and T3 for clarity&#8217;s sake.<br><br><span style=\"text-decoration: underline;\">T1 Hive:</span></p>\n\n\n\n<ul><li>BP: 25 &gt; 20</li><li>Energy Cost: 1750 &gt; 2100</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">T2 Hive</span>:</p>\n\n\n\n<ul><li>HP: 1.250 &gt; 1000</li><li>BP: 50 &gt; 37</li><li>Energy Cost: 4.083,33 &gt; 4.200</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">T3 Hive</span>:</p>\n\n\n\n<ul><li>HP: 2.750 &gt; 2.000</li><li>BP: 75 &gt; 50</li><li>Energy Cost: 6.416,66 &gt; 6.300</li></ul>\n\n\n\n<p><strong>Kennels</strong><br>Kennels have 2 different levels, I will denote them T2 and T3.<br><br><span style=\"text-decoration: underline;\">T2 Kennel</span>:</p>\n\n\n\n<ul><li>Mass Cost: 550 &gt; 525</li><li>Energy Cost: 2.750 &gt; 2.625</li><li>Build Time: 1.100 &gt; 1.000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">T3 Kennel</span>:</p>\n\n\n\n<ul><li>HP: 3.000 &gt; 2.500</li><li>Build Rate: 20 &gt; 30</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Kennel Drone</span>:<br>With these changes, it will be less punishing to lose the drones as they will rebuild faster and at a much lower cost. The elevation increase should make the drones less prone to random AoE attacks landing on the base.</p>\n\n\n\n<ul><li>HP: 6 &gt; 50</li><li>Mass Cost: 250 &gt; 100</li><li>BuildTime: 750 &gt; 500</li><li>Elevation 2 &gt; 3</li></ul>\n\n\n\n<p><strong>T2 PD</strong><br>The economy Stats of a lot of units are all over the place currently with ratios between factions being close but not the same for no apparent reason (Take the Sera and Aeon PD which have the same cost but Sera randomly costs 26 more BT). We normalized the stats and adjusted the values slightly.<br><br><span style=\"text-decoration: underline;\">UEF</span>:</p>\n\n\n\n<ul><li>BuildTime: 664 &gt; 675</li><li>Energy Cost: 3600 &gt; 3780</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon</span></p>\n\n\n\n<ul><li>BuiltTime: 701 &gt; 675</li><li>Mass Cost: 528 &gt; 540</li><li>Energy Cost: 3648 &gt; 3780</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Sera</span></p>\n\n\n\n<ul><li>BuiltTime: 727&gt; 675</li><li>Mass Cost: 528 &gt; 540</li><li>Energy Cost: 3648 &gt; 3780</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span></p>\n\n\n\n<ul><li>Energy Cost: 3400 &gt; 3360</li></ul>\n\n\n\n<p><strong>T2 static Artillery</strong><br>T2 static artilleries shouldn&#8217;t be able to consistently hit small single targets. That&#8217;s why we are increasing the firing randomness of all arties by 0.25. Aeon artillery gets a small buff as it&#8217;s currently the most underwhelming one. We also normalized the unit economy stats and made a few small tweaks.<br><span style=\"text-decoration: underline;\">UEF</span></p>\n\n\n\n<ul><li>Mass Cost: 1890 &gt; 1900</li><li>Energy Cost: 13500 &gt; 13585</li><li>Firing Randomness: 2 &gt; 2.25</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon</span></p>\n\n\n\n<ul><li>Mass Cost: 2079&gt; 2080</li><li>Energy Cost: 14850&gt; 14872</li><li>Firing Randomness: 1.5 &gt; 1.75</li><li>Damage Radius: 2 &gt; 2.25</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Sera</span></p>\n\n\n\n<ul><li>Mass Cost: 1995&gt; 2000</li><li>Energy Cost: 14250&gt; 14300</li><li>Firing Randomness: 1.5 &gt; 1.75</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span></p>\n\n\n\n<ul><li>Energy Cost: 12000&gt; 12012</li><li>Firing Randomness: 2.5&gt; 2.75</li></ul>\n\n\n\n<p><strong>Nukes</strong><br>Nukes are extremely strong and can be very oppressive, especially in team games. In almost every game in an early late-game, it&#8217;s a good idea to make a nuke. Its relatively low cost combined with having potential for game-ending damage while always being able to find value even if the enemy has adequate defenses in place makes it a no-brainer. Not to mention that it will force out SMDs, and not just 1, depending on the map it can be up to 4 which already makes the nuke worth it without even killing anything.<br><br>The small mass cost increase and higher energy cost are supposed to make it more expensive and delay the 1st nuke by requiring more E infrastructure to set up. You will no longer be able to get T3, make 2 T3 pgens, and a nuke launcher immediately afterward. Additionally, the E cost of the missile itself is increased (The Launcher will now drain 5k instead of 4.5k E/sec), this will also increase the importance of adjacency while discouraging heavy assisting. <br><br><strong>Nuclear warheads</strong></p>\n\n\n\n<ul><li>Energy Cost: 1.350.000 -&gt; 1.500.000</li></ul>\n\n\n\n<p><strong>Nuke Silos</strong></p>\n\n\n\n<ul><li>Mass Cost: 15.000 &gt; 16.500</li><li>Energy Cost: 210.000 &gt; 412.500</li></ul>\n\n\n\n<p><strong>Nuke Subs</strong></p>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon, UEF</span></p>\n\n\n\n<ul><li>Mass Cost: 9000 &gt; 9.500</li><li>Energy Cost: 80.000 &gt; 152.000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span></p>\n\n\n\n<ul><li>Mass Cost: 10.000 &gt; 10.500</li><li>Energy Cost: 80.000 &gt; 152.000</li></ul>\n\n\n\n<p><strong>T3 Static Artillery</strong><br>Energy cost nerfs follow in the steps of Air experimentals and nukes. The E cost increase is meant to force players to set up proper energy infrastructure before making artillery instead of being able to dump all of their mass extremely fast. The E maintenance cost increase is meant to create a real operational cost, especially when a player has multiple artilleries.<br><br>Increase E cost of all artilleries 1.5 times and double energy required to fire.</p>\n\n\n\n<p><span style=\"text-decoration: underline;\">UEF</span></p>\n\n\n\n<ul><li>Energy Cost: 900.000 &gt; 1.350.000</li><li>Energy Required to Fire: 8.000 &gt; 16.000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Aeon</span></p>\n\n\n\n<ul><li>Energy Cost: 915.000 &gt; 1.372.500</li><li>Energy Required to Fire: 8.500 &gt; 17.000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Sera</span></p>\n\n\n\n<ul><li>Energy Cost: 885.000 &gt; 1.327.500</li><li>Energy Required to Fire: 7.500 &gt; 15.000</li></ul>\n\n\n\n<p><span style=\"text-decoration: underline;\">Cybran</span></p>\n\n\n\n<ul><li>Energy Cost: 870.000 &gt; 1.305.000</li><li>Energy Required to Fire: 7.000 &gt; 14.000</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\">Mechanics</h4>\n\n\n\n<ul><li>New hotkey for setting target priorities of selected units to the type of unit that you hover over with the mouse</li><li>All ACUs and SACUs that can make tac missiles will start construction by default instead of having to manually enable it.</li><li>Loyalists will no longer redirect Billy Nukes</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\">Fixes</h4>\n\n\n\n<ul><li>Fixed the icon of the Heavy Shield upgrade for Aeon ACU</li><li>Fixed the damage of UEF and Sera T1 Artillery. They dealt 2 less damage than intended since the way that units break tree groups was changed some time ago.</li><li>Adjust the hitbox of Sera Sniper so that MMLs can hit it properly</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\">Contributors</h4>\n\n\n\n<ul><li>Spikey , Farms, Tagada, Turin , Jip , Penguin, 4z0t</li></ul>\n",
        "author": "Rowey",
        "media": "https://direct.faforever.com/wp-content/uploads/2023/02/LUerY1mtYFI.jpg"
    },
    {
        "slug": "new-faf-website",
        "bcSlug": "New-FAF-Website",
        "date": "2023-01-27T17:40:35",
        "title": "New FAF Website",
        "content": "\n<p>Well, it&#8217;s been almost a month since the new website released so this news article is a bit late to say the least. Nonetheless, I&#8217;m very excited to see the new website up and running without any issues. Couple of day one bugs were squashed and it seems everything else is functioning smoothly. </p>\n\n\n\n<h2 class=\"wp-block-heading\">The website itself</h2>\n\n\n\n<p>The new website does not only bring a thick coat of &#8220;modern&#8221; paint but also a lot of new content and other small improvements. From new pages that were badly needed in our official website such as main changes FAF has implemented like engymod, a tutorial page or a donations page explaining how we manage our donations and other badly needed pages. Other improvements are things the user just doesn&#8217;t see, where the real magic happens in the back, like how now we don&#8217;t slow down the website bringing huge libraries like jquery and bootstrap or how much fat has been cut from the old code or how the website caches (holds) certain information instead of continuing to request it from the server everytime someone visits specific pages (newshub, leaderboards, clans), lessening its load on FAF infrastructure.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Color scheme and &#8220;new&#8221; logo</h2>\n\n\n\n<p>The new website actually has a color scheme. Something that is good to keep FAF represented well or to kinda like have our own brand colors. The colors I choose where black/dark grey and a gold/dark orange to simulate the colors of a forge. I think it looks very elegant and matches the muteness of the game adequately. However, in the future an accessibility mode should be implemented to change the theme to a blue (because FYI, blue is more or less the best color for colorblind people to read across the board).</p>\n\n\n\n<p>There was also a very subtle change with the FAF logo, which was removing the god awful circle that goes around it. Now its less about if it looks good or not without the circle, its about usefulness. Here&#8217;s my case to remove the circle: Putting a rectangle inside a circle makes the rectangle very small, the words &#8220;FAF&#8221; are like a rectangle, so when we use the circle logo, we need to either have FAF in a small size or we need to give the circle a lot of size because its 1:1 (like a square). In the other hand, if we remove the circle, we have a clean 16:9 rectangle logo that is easy to fit around and read clearly. Plus it looks 100 times cleaner and smoother while the circle provides an old and clunky appearance.</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https://direct.faforever.com/wp-content/uploads/2023/01/image.png\"><img decoding=\"async\" loading=\"lazy\" src=\"https://direct.faforever.com/wp-content/uploads/2023/01/image.png\" alt=\"\" class=\"wp-image-9063\" width=\"246\" height=\"197\"/></a><figcaption>Our Color Scheme and Clean Logo</figcaption></figure>\n\n\n\n<h2 class=\"wp-block-heading\">My work as a volunteer and newb to web development</h2>\n\n\n\n<p>The FAF website has been my one and only project as a software developer. Originally I just wanted to change the images in the old website because I was the media manager for the promotions team, designing images and logos for tourneys or other exciting news. However, I clearly got too much into the whole aspect of creating websites and I got the bright idea of re-designing the website. This was around November-December 2021. Let me tell you, it was a very difficult challenge. Not only having to learn how to program for the first time, but having to transverse a mess of a website that had band aids over band aids to keep it running. At times I would give up for a month or two and then come back to it. I believe if the previous contributors of the website would have had a long term approach over a short term one to the website, it wouldn&#8217;t have been so difficult to navigate certain parts. Nonetheless, the website taught me a lot, I didn&#8217;t know programming could be this fun, exciting and challenging. To the point that I&#8217;m switching careers just because of how insanely cool doing this is and it all started with something so small as creating images for FAF. The pride I feel showing others &#8220;hey, I made this, people are using it&#8221; or being the one called to fix an issue or add a new feature to the website, it makes me feel like a real developer.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Long term over short term</h2>\n\n\n\n<p>Funnily enough, I started with a website re-design but now its a website re-make. I&#8217;m currently reworking our backend logic and making sure the website as a whole is as compact and simple as it can be. I want to be able to leave the website and know that if someone wants to add a feature or modify a route, they won&#8217;t face lots of bloatware and redundant code. I want to make sure adding new features and pages doesn&#8217;t break the website. I don&#8217;t recall where it is but I recall reading Brutus saying nobody wanted to touch the website because it was a dumpster fire or something along those lines. I&#8217;m happy to say, the new website is a clean and fixed from the ailments of the past. No longer a place where to add a page you had to create 3 new files and write 1 line on another 2 files or where we had 21 javascript files that served absolutely no purpose and I deleted them by putting their function in a for loop around 8 lines long. </p>\n\n\n\n<h2 class=\"wp-block-heading\">Future Plans</h2>\n\n\n\n<p>Well, I don&#8217;t think I&#8217;ll have the same crazy amount of time to keep working on the FAF website forever but, I foresee a new home page for our client, leaderboards with long term stats, more clan specific stats and improvements to the clan system and much more. Its all going to depend on how free I am because nowadays I&#8217;m working with some classmates on some other projects and I might take long to implement these new features. But either way, know that I will always be here to guide others and fix any issues the website comes up with! </p>\n",
        "author": "Javi",
        "media": "https://direct.faforever.com/wp-content/uploads/2023/01/wazuzu.png"
    },
    {
        "slug": "game-version-3738",
        "bcSlug": "Game-version-3738",
        "date": "2022-06-16T07:21:33",
        "title": "Game version 3738",
        "content": "\n<p>The past month has been exciting &#8211; there is no other word that we can use.</p>\n\n\n\n<p>From a development perspective we&#8217;re on the verge of being able to provide a modern, interactive development environment to our community. With the work of Eluvatar a Visual Studio Code (VSC) extension is close to release that provides intellisense support for map scripters, mod makers and game developers. And with the work of Ejsstiil the Lua debugger that ships with the game is fully functional again when you work from your development environment. Programmers understand how critical these features are for the development of essentially anything.</p>\n\n\n\n<p>And from a user perspective the game has never been more performing. Specifically the unfamously slow ASF battles has been tackled. For the majority of matches the game no longer slows down, with the assumption that there is no potato processor participating in the match.</p>\n\n\n\n<p>All of that shadows all of the other critical work that has been done the past month with thanks to all the remaining contributors, including SpikeyNoob, Hdt80bro and LilJoe7k4 who made their first contributions to the game repository.</p>\n\n\n\n<p>A great deal of appreciation towards everyone that made this patch possible.</p>\n\n\n\n<p>I hope you all enjoy the lack of APM during a late Seton&#8217;s Clutch game,</p>\n\n\n\n<p>With kind regards,</p>\n\n\n\n<p>Jip</p>\n\n\n\n<h3 class=\"wp-block-heading\">Bug fixes</h3>\n\n\n\n<ul><li>(#3896, #3899, #3901) Fix UI elements ignoring the console command UI_ToggleGamePanels</li><li>(#3909) Fix enhancements ETAs leaking to the other screen when using split screen</li><li>(#3876) Sanitize weapon target priorities of Point Defenses<br>This fixes the issue that point defenses are not firing while a target is in range</li><li>(#3923, #3924) Fix an economy related glitch that allows you to gain resources free of charge</li><li>For all intends and purposes we will not dive into the details&nbsp;<img decoding=\"async\" style=\"width: 15px;\" src=\"https://forum.faforever.com/plugins/nodebb-plugin-emoji/emoji/android/1f609.png?v=hr5l18l34o8\" alt=\"ðŸ˜‰\"></li><li>(#3946) Fix damage of child projectiles, such as Cybran tactical missiles after they split</li></ul>\n\n\n\n<p></p>\n\n\n\n<h3 class=\"wp-block-heading\">Features</h3>\n\n\n\n<ul><li>(#3887) Introduce Intellisense support for the FA Visual Studio Code (VSC) extension<br>As map scripters, mod makers and game developers we have been living in a cave. But no more &#8211; thanks to the work on the extension and the work in this pull request we are slowly introducing annotation across the repository. For this with programming experience: it is like the introduction of Typescript, after working for years on ends in JavaScript. This also works when you have no development environment for the FA repository on your system, see the readme on the GitHub page of the FA repository for more information.</li><li>(#3938) Revive the FA Lua debugger<br>Revives the FA Lua debugger when you are working from your development environment. Allows you to set breakpoints and inspect the stack, locals and globals. Extremely useful when you are debugging your maps, mods and when you&#8217;re working on game development in general. Requires a development environment in order to work. You can set this up in half an hour, see the readme on the GitHub page of the FA repository for more information.</li><li>(#3883) Introduce a UI to keep track of the mass fabricator behavior<br>The UI element is to the right of the economy panel. It can be dragged horizontally by using the middle mouse button.</li><li>(#3889, #3906) Improve in-game chat settings panel<br>Fixes various small issues with the chat panel and allows you to view and inspect the changes in the settings live by using the apply button.</li><li>(#3863) Pimp the Aeon Quantum Optics Facility<br>The unit was unfinished in every regard &#8211; as part of a live programming session we improved the feeling and aesthetics.</li><li>(#3905) Add guidelines for a development environment for FA for Linux-based operating systems<br>For more information, see the work instructions of the GitHub page.</li><li>(#3933) Use playable area instead of map size on the default scoreboard</li><li>(#3835) Introduce a builder pattern to create UI elements<br>An alternative, more modern approach to creating, positioning and checking of UI elements.</li></ul>\n\n\n\n<h4 class=\"wp-block-heading\">For map, mod and AI developers</h4>\n\n\n\n<ul><li>(#3884) Add support for a unit.IsCivilian flag<br>Introduces an easy to use flag to indicate whether a unit belongs to a civilian army</li><li>(#3894) Add support for a unit.ImmuneToStun flag<br>Introduces an easy to use flag to make a unit immune to stuns</li><li>(#3894) Add support for a shield.SkipAttachment flag<br>Introduces an easy to use flag to allow shields to function when attached</li><li>(#3944) Add support for multiple upgrade animations via the function unit.GetUpgradeAnimation</li></ul>\n\n\n\n<h3 class=\"wp-block-heading\">Performance</h3>\n\n\n\n<ul><li>(#3845) Reduce table allocations when defining weapon target priorities</li><li>(#3875, #3945) Reduce memory impact of units, weapons and props</li><li>(#3891) Sanitize guard scan radius of units<br>The guard scan radius is used by units on attack move or patrol to find and engage hostile units in their surrounding. The value was all over the place and could cause serious slowdowns, especially during the late game.</li><li>(#3892, #3903) Sanitize footprints of air units<br>All non-experimental air units had a footprint size of 1 &#8211; the size of a wall. Because of that there were two issues: due to their proximity it introduced mesh intersections that break the immersion of the game. And due to their density it causes performance issues. From now on all bombers have a footprint size of 4, all gunships have a footprint size of 3 and all interceptors have a footprint size of 2.</li><li>(#3930) Remove dependency on the schook folder<br>Improves code maintainability and reduces the amount of hooks that ships with the game.</li><li>(#3857, #3931, #3950) Sanitize weapon parameters<br>There are three crucial parameters that determine the behavior and performance of weaponry: the weapon target check interval, the weapon tracking radius and the retargeting behavior of weaponry. The weapon target check interval is now based on the rate of fire of the weapon. The weapon tracking radius is reduced to 7% for non-anti air weaponry units and 15% for anti air weaponry. The retargeting is disabled unless the weapon is considered artillery or anti air. This slightly changes the behavior of units, by standardizing their weapon parameters. In return, the game performs a lot better and units respond more consistent based on their weapon statistics.</li><li>(#3949) Reduce impact of props on FPS<br>Aligns the rendering distance of props with the base game</li><li>(#3943, #3951) Reduce impact of mesh entities on FPS<br>Aligns the rendering of various mesh-based entities with their respective size. As an example, the adjacency node was rendered up to the same distance as that of shields.</li></ul>\n\n\n\n<h3 class=\"wp-block-heading\">Other changes</h3>\n\n\n\n<ul><li>(#3885) Fix argumentations for the Hunter AI</li><li>(#3879) Fix minor issue with lobby</li><li>(#3881) Refactor effect files of the Lighting Tank<br>As told to us by Rowey &#8211; we&#8217;d be lost without him.</li><li>(#3895) Fix minor issues with the initialisation files</li><li>(#3907, #3926) Improve the /nomovie command line switch</li><li>(#3908) Introduce a /nomusic command line switch</li><li>(#3904) Fix game options menu not being scrollable by mousewheel</li><li>(#3913) Fix issues with the .gitignore of the repository</li><li>(#3921) Add tooltip to patchnotes button in the lobby<br>The mighty Rowey &#8211; at work again.</li><li>(#3882) Fix bone names of the upgraded Hives</li><li>(#3925) Fix the width, padding and layouts of various UI elements</li><li>(#3912, #3724) Add in remaining base game blueprint and script files<br>Greatly improves code maintainability of working on the game as a whole.</li><li>(#3947) Fix UEF engineers not applying their water animation</li><li>(#3948) Fix a rare issue where the speed adjustment of (slow) hover units caused an error</li><li>(#3941) Fix categories mismatch for the Atlantis</li></ul>\n\n\n\n<h3 class=\"wp-block-heading\">Contributors</h3>\n\n\n\n<ul><li>LilJoe7k4: (#3845)</li><li>speed2: (#3885)</li><li>4z0t: (#3879, #3883, #3835)</li><li>Jip: (#3895, #3894, #3884, #3875, #3863, #3891, #3892, #3903, #3923, #3913, #3924, #3857, #3931, #3912, #3724, #3944, #3947, #3946, #3945, #3948, #3950)</li><li>Ejsstiil: (#3896, #3889, #3899, #3907, #3908, #3909, #3904, #3906, #3901, #3926, #3925, #3937)</li><li>Madmax: (#3863, #3951, #3943)</li><li>SpikeyNoob: (#3905)</li><li>Tagada: (#3876)</li><li>Rowey: (#3921, #3881, #3882)</li><li>Hdt80bro: (#3933)</li><li>Eluvatar: (#3887)</li><li>Uveso: (#3941)</li></ul>\n\n\n\n<p></p>\n",
        "author": "Jip",
        "media": "https://direct.faforever.com/wp-content/uploads/2022/06/4hqxmCA0TgE.jpg"
    },
    {
        "slug": "weapon-target-checking-intervals",
        "bcSlug": "Weapon-Target-Checking-Intervals",
        "date": "2022-05-31T12:45:48",
        "title": "Weapon Target Checking Intervals",
        "content": "\n<p>Every unit in the game has a weapon. All weapons combined take up a significant portion of the simulation budget. The time is not spent on creating the projectiles. It is spent on the scanning for targets and the filtering of targets for the weapon to fire at.</p>\n\n\n\n<p>At the end of this topic you&#8217;ll understand why this is so expensive, what we&#8217;re changing about it and what that means for the behavior of every single unit in this game. The reason for these changes is simple: performance. Nobody wants to play in slow motion, even though people unconsciously appreciate the additional APM.</p>\n\n\n\n<p>This topic is related to this pull request on <a href=\"https://github.com/FAForever/fa/pull/3857/files\" data-type=\"URL\" data-id=\"https://github.com/FAForever/fa/pull/3857/files\">Github</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">Why it is expensive</h2>\n\n\n\n<p>Throughout this section I&#8217;ll purposefully make simplifications. These are marked with an asterisk (a&nbsp;<code>*</code>). I will not describe why these are simplifications &#8211; it would make the topic too lengthy and it would take up too much of my time. The best you can have is the speculation of why things are a simplification of people taking the time to read and respond to this topic.</p>\n\n\n\n<p>The introduction states that a weapon performs two actions to find targets*:</p>\n\n\n\n<ul><li>(1) Scan the surrounding of the weapon for any target</li><li>(2) Filter the targets for priority</li></ul>\n\n\n\n<p>For the programming enthusiastic among us we&#8217;ll talk about complexity theory. Complexity theory describes how expensive an operation is based on the input*. For this example we will work with the following scenario:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><a href=\"https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1.webp\"><img decoding=\"async\" loading=\"lazy\" src=\"https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-1024x605.webp\" alt=\"\" class=\"wp-image-8276\" width=\"810\" height=\"478\" srcset=\"https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-1024x605.webp 1024w, https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-300x177.webp 300w, https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-768x454.webp 768w, https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-1536x907.webp 1536w, https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1-1200x709.webp 1200w, https://direct.faforever.com/wp-content/uploads/2022/05/Imge-1.webp 1593w\" sizes=\"(max-width: 810px) 100vw, 810px\" /></a><figcaption>A screenshot of fifteen purple Mantis and ten red Mantis</figcaption></figure></div>\n\n\n\n<p>We denote&nbsp;<code>n</code>&nbsp;to be the number of weapons that we need to scan for. When a weapon scans for targets there are some trivial improvements that we can make:</p>\n\n\n\n<ul><li>(a) We can easily skip allied units*</li><li>(b) We can use an acceleration structure to easily skip units that are very unlikely to be a valid target</li></ul>\n\n\n\n<p>Using these two tricks we can scan for targets in a reasonable fashion: Using (a) we can skip checking for our own or allied units. And, using (b) we can (efficiently) skip checking entire collections of units that are far away. At some point we end up with a list of targets. We denote&nbsp;<code>k</code>&nbsp;as the number of targets found for a given weapon.</p>\n\n\n\n<p>We&#8217;re scanning for all weapons, and each weapon has a series of targets. Using the notation provided before it means we can assume to at most&nbsp;<code>nk</code>&nbsp;targets. In this example we have fifteen purple Mantis and ten red Mantis. Therefore we have at most 300 targets*: 150 from the perspective of the purple Mantis and 150 from the perspective of the red Mantis.</p>\n\n\n\n<p>In this given situation one can argue that all weapons can point to roughly the same units. Therefore they share a common list of targets, and at this point all the targets are homogeneous. Using batching and other tricks you can get even more performance for this phase.</p>\n\n\n\n<p>Once we have a list of targets for a weapon we need to prioritize those targets. An example of such a priority list is the following:</p>\n\n\n\n<pre class=\"wp-block-preformatted\" style=\"font-style:normal;font-weight:400;text-transform:uppercase\">TargetPriorities = {\n    'EXPERIMENTAL',\n    'SNIPER',\n    'ANTISHIELD',\n    'MOBILE TECH3 ARTILLERY',\n    'MOBILE TECH2 SILO',\n    'STRUCTURE SHIELD',\n    'STRUCTURE TECH3 DEFENSE DIRECTFIRE',\n    '(STRUCTURE * TECH2 * DEFENSE - ANTIMISSILE)',\n    'MOBILE TECH1 ARTILLERY',\n    'MOBILE TECH3',\n    'MOBILE TECH2',\n    'MOBILE TECH1',\n    'COMMAND',\n    '(ALLUNITS - SPECIALLOWPRI)',\n},</pre>\n\n\n\n<p>By all means this list is excessive. Yet, this is not a made up example as this is taken from the Cerberus turret.</p>\n\n\n\n<p>A common query for computers is to determine whether one element in a list matches a given condition. In order to determine this a computer has to iterate the entire list*. Therefore, say our Mantis used the example target priorities it would need to iterate across the list at least twelve times: only then we find a unit that is applicable to the categories given: a tech 1 mobile unit named a Mantis. We denote&nbsp;<code>l</code>&nbsp;as the number of elements in the target priorities list. With it we can finalize our formula to compute the total number of computations with&nbsp;<code>lkn</code>.</p>\n\n\n\n<p>Each weapon will have to determine whether there is a unit of a given priority in their range. Therefore all of the 300 targets need to be filtered. This is no homogenous operation &#8211; we can set the target priorities of each unit individually. Therefore there&#8217;s no batching that we can apply. This is simply expensive, and it depends on the number of nearby targets.</p>\n\n\n\n<p>By now you understand that this can be expensive. In this simple, yet common scenario we already have to scan for hundreds of targets. Let alone when we are dealing with entire armies colliding, or with entire clouds of ASF.</p>\n\n\n\n<p>For your idea, using&nbsp;<code>n</code>&nbsp;for the number of units to check for,&nbsp;<code>k</code>&nbsp;for the average number of targets and&nbsp;<code>l</code>&nbsp;for the size of the target priority list we can end up with:</p>\n\n\n\n<ul><li>100 units with each 50 targets and 5 priorities: 100 x 50 x 5= 25.000 checks*</li><li>300 units with each 200 targets and 5 priorities: 300 x 200 x 5 = 300.000 checks*</li><li>400 units with each 400 targets and 5 priorities: 400 x 400 x 5 = 800.000 checks*</li></ul>\n\n\n\n<p>The growth looks like a quadratic one*. Anything that is quadratic is an issue when you&#8217;re trying to do something real time. The only solution is to slow down the simulation &#8211; and oh boy it gets slow at times.</p>\n\n\n\n<h2 class=\"wp-block-heading\">What we&#8217;re changing</h2>\n\n\n\n<p>The scanning of targets has a series of parameters:</p>\n\n\n\n<ul><li>The frequency, or the&nbsp;<code>TargetCheckInterval</code>&nbsp;of a weapon</li><li>The flexibility, or the&nbsp;<code>AlwaysRecheckTarget</code>&nbsp;of a weapon</li><li>The complexity, or the&nbsp;<code>TargetPriorities</code>&nbsp;list of a weapon</li></ul>\n\n\n\n<p>By changing these values we can determine how much they influence the performance of the game. before we do that it is important to understand what they mean.</p>\n\n\n\n<p>The parameter&nbsp;<code>TargetCheckInterval</code>&nbsp;determines how often a weapon scans its surroundings for targets. It determines how responsive a unit is in general. As an example, a mantis that scans for targets every 3 seconds may miss a scout that was on the edge of its attack radius.</p>\n\n\n\n<p>The parameter&nbsp;<code>AlwaysRecheckTarget</code>&nbsp;determines whether a weapon continuously scans for a better target, even though it already has a target. This allows a unit to switch to another target that has a higher target priority. The priorities depend on the&nbsp;<code>TargetPriorities</code>&nbsp;list.</p>\n\n\n\n<p>The parameter&nbsp;<code>TargetPriorities</code>&nbsp;determines what targets are preferred over others. The previous example was quite extensive. Another example is the target priorities list of an actual Mantis:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">TargetPriorities = {\n    'TECH1 MOBILE',\n    'TECH2 MOBILE',\n    'TECH3 MOBILE',\n    '(STRUCTURE * DEFENSE - ANTIMISSILE)',\n    '(ALLUNITS - SPECIALLOWPRI)',\n},</pre>\n\n\n\n<p>You&#8217;d expect a weapon to have between four to six priorities to differentiate between.</p>\n\n\n\n<p>We&#8217;ll sanitize these values to find a clean balance between performance and playability. To summarize the changes:</p>\n\n\n\n<ul><li>(1) The average weapon will have a higher&nbsp;<code>TargetCheckInterval</code>&nbsp;that depends on the range of the weapon. The more range the weapon has, the higher the target check interval is.</li><li>(2) The average weapon will not recheck for targets once it has acquired a target, therefore&nbsp;<code>AlwaysRecheckTarget</code>&nbsp;is set to false. Indirect weapons such as artillery, stationary weapons such as point defense, weapons with an attack radius of 50 or higher and weapons of experimental units are allowed to recheck their targets as they may end up firing at a low-value unit purely because it was the first one in range.</li><li>(3) The&nbsp;<code>TargetPriorities</code>&nbsp;target priority list is simplified or extended until there are four to six elements left.</li></ul>\n\n\n\n<p>Fun fact, this is the target priority list of a Summit:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">TargetPriorities = {\n    'NAVAL MOBILE',\n    '(ALLUNITS - SPECIALLOWPRI)',\n},</pre>\n\n\n\n<p>But hey &#8211; ATP doesn&#8217;t give you any advantage. Just your battleships being able to magically prioritize my battleships, while my summits attack your shards. No big deal &#8211; it is fair and square.</p>\n\n\n\n<p>You can find the exact formula can be found in the pull request:</p>\n\n\n\n<ul><li><a href=\"https://github.com/FAForever/fa/pull/3857/files\">https://github.com/FAForever/fa/pull/3857/files</a></li></ul>\n\n\n\n<p>You can find the relevant changes in this paste bin file:</p>\n\n\n\n<ul><li><a href=\"https://pastebin.com/64kKE75j\">https://pastebin.com/64kKE75j</a></li></ul>\n\n\n\n<p>You can search for units on their unit id or on their English name.</p>\n\n\n\n<h2 class=\"wp-block-heading\">What it means to the behavior of units</h2>\n\n\n\n<p>On average units either:</p>\n\n\n\n<ul><li>(1) no longer respond to change</li><li>(2) respond slower to change</li></ul>\n\n\n\n<p>As an example of (1), if a Mantis is firing at a brick and suddenly a Pillar is in its attack radius then it will not switch targets. An example of (2), for weapons that do respond to changes they end up being a few ticks slower with actually responding to the change because we check for targets less frequently.</p>\n\n\n\n<p>Note that a weapon will scan for new targets when it &#8216;loses&#8217; (destroys) its current target. Therefore, for the average battle, units will still rapidly scan for targets for the sake of finding a new target. This is particularly true for interceptors and superiority fighters as it takes only five to seven shots to destroy their counterpart.</p>\n\n\n\n<p>In practice I&#8217;ve made sure that the changes are barely noticeable from a gameplay perspective.</p>\n\n\n\n<h2 class=\"wp-block-heading\">What it means to performance</h2>\n\n\n\n<p>Initial tests with AI show that we can have up to 600 units with these changes at the same costs of 500 units without these changes. That is quite a significant change.</p>\n\n\n\n<p>Dense fights are significantly faster performance wise. As an example, try and spawn 300 mantis next to 300 other mantis. The performance tanks to 150 ms / tick, where our budget is 100 ms / tick. With these changes it sits at roughly 20 ms / tick. That is&nbsp;<strong>quite a significant</strong>&nbsp;change.</p>\n",
        "author": "Jip",
        "media": "https://direct.faforever.com/wp-content/uploads/2022/05/0CdRI_YKtaA.jpg"
    }
]
